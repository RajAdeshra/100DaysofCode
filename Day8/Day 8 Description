// Day 8 of 100 Days of Code 
  I have continued my progress with a basic 2D Array. Lets elaborate ahead.
=>TOPIC : 2D Array
  Question: A  6 X 6 Array is given. 
  An hourglass in an array is a portion shaped like this:

  a b c
    d
  e f g
  For example, if we create an hourglass using the number 1 within an array full of zeros, it may look like this:

  1 1 1 0 0 0
  0 1 0 0 0 0
  1 1 1 0 0 0
  0 0 0 0 0 0
  0 0 0 0 0 0
  0 0 0 0 0 0
  Actually, there are many hourglasses in the array above. The three leftmost hourglasses are the following:

  1 1 1     1 1 0     1 0 0
    1         0         0
  1 1 1     1 1 0     1 0 0
  The sum of an hourglass is the sum of all the numbers within it. The sum for the hourglasses above are 7, 4, and 2, respectively.
  In this problem you have to print the largest sum among all the hourglasses in the array.
   
=>TEST CASES: 
   CASE 1:
   Input:
   1 1 1 0 0 0
   0 1 0 0 0 0
   1 1 1 0 0 0
   0 0 2 4 4 0
   0 0 0 2 0 0
   0 0 1 2 4 0
   Output:
   19
   Explanation: The hourglass which has the largest sum is:
     2 4 4
       2
     1 2 4
   and the sum is : 19
  // Not much test cases as this is not a user input question.
  LOGIC:
  We take the hourglass structure from the array.
  Sum the elements of the hourglass in the array and print it
  ----------------------------------------------------------------------------------------------------------------------------------------
  CODE:
  import java.io.*;
import java.util.*;

public class Solution
{
    public static void main(String[] args)
    {
        int a[][] = new int[6][6];
        int maxSum = Integer.MIN_VALUE;
        try (Scanner scanner = new Scanner(System.in);)
        {
            for(int i = 0; i < 6; i++)
            {
                for(int j = 0; j < 6; j++)
                {
                    a[i][j] = scanner.nextInt();
                    if (i > 1 && j > 1)
                    {
                        int sum =
                            a[i][j]
                            + a[i][j-1]
                            + a[i][j-2]
                            + a[i-1][j-1]
                            + a[i-2][j]
                            + a[i-2][j-1]
                            + a[i-2][j-2];
                        if (sum > maxSum) {maxSum = sum;}
                    }
                }
            }
        }
        System.out.println(maxSum);
    }
}
   

  
